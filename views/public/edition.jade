
extends ../layout

include ../includes/admin-mixins

append content
 
  .main  
   .form-actions
      if (locals.isEditionOwner)
        span( class="pull-right label label-" + edition.state) #{edition.state}
    

      .row
        .span2
            a(title=instructor.name, href='/instructors/' + instructor.id)
              img.profile(src='https://profiles.google.com/s2/photos/profile/' + instructor.googleId)
        .span8 
          h3 Edition details:
          ul.unstyled
            li Instructor: 
              a(href='/instructors/' + instructor.id) #{instructor.name}
            li Course: 
              a(href='/courses/' + course.uuid) #{course.name}
            li Venue: #{edition.address}
              a(target='_blank', href='https://maps.google.es/maps?q=' + edition.geopoint.lat + ',' + edition.geopoint.lng )  (show in google maps)
              
            li Date: #{edition.date} 
            li
              .contactform
                a.btn.contact
                  i.icon-envelope.icon
                  &nbsp;More info
                if (locals.isEditionOwner && edition.state ==  'NEW' || locals.isAdmin)
                  | 
                  a( href='/courses/' + course.uuid + '/editions/' + edition.id + '/edit').btn Edit
        -if(videos.length > 0)  
          .row-fluid
            .span12
              h3 Videos:
              -videos.forEach( function(video){
                .span3.video-container
                  a(href=video.url, target='_blank')
                    img.video-thumbnail(src=video.thumbnail, title="#{video.title}  (#{video.duration} secs)")
                    span.locale.label(class=isoLangs.getColor(video.locale)) #{ isoLangs.get(video.locale) }
                  .video-data  
                    .video-caption 
                      a.video-title(href=video.url, target='_blank') #{video.title}
                      span.video-likes #{video.ranking.numLikes} likes, 
                      span.video-dislikes #{video.ranking.numDislikes} dislikes

              -})


      
  .certificates
    if (locals.isEditionOwner && edition.state != 'NEW' && certificates.length > 0) 
      h3 Certificates
      ul.unstyled
        - certificates.forEach(function (certificate){
          li 
            if (edition.state == 'PAID' || locals.isAdmin)
              a( href='/certificates/' + certificate.uuid) #{certificate.name} - #{certificate.email}
            else
              &nbsp; #{certificate.name} - #{certificate.email}
        - })

append scripts
  if (locals.isEditionOwner && edition.state == 'NEW')
    //- Edici√≥n de certificados
    script 
      define('editview', 
        [ 'certificates/certificatemodel', 'certificates/certificatecollectionview',  'jquery' ], 

          function(CertificateModel, CertificateCollectionView) {
      

            var certificates = new Backbone.Collection([], {
                model: CertificateModel,
              });
            certificates.url = '/courses/#{course.uuid}/editions/#{edition.id}/certificates';
            
            certificates.fetch({ 
              success: function(collection, response){
                  new CertificateCollectionView({
                    collection: collection,
                    edition : '!{edition.id}',
                    courseUUID : '!{course.uuid}',
                    el: this.$('.certificates')
                  }).render();
              }
            });
      });

  script
    define('contactView',
      ['editions/contactrequestview', 'editions/contactrequestmodel', 'jquery'],

      function(ContactRequestView, ContactRequestModel) {
        var view = new ContactRequestView({
          model: new ContactRequestModel( { 
            url: '/courses/#{edition.courseUUID}/editions/#{edition.id}/contact',
            courseName: '#{course.name}',
            editionDate: '#{edition.date}',
            editionVenue: '#{edition.address}'
            }),
          instructorId: !{JSON.stringify(instructor.id)},
          el: $('.contactform')
        });

      });


